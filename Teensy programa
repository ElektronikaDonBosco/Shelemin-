#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioSynthWaveformSine   sine1;          //xy=362.53125762939453,122.03125476837158
AudioSynthWaveform       waveform1;      //xy=364.03125762939453,163.03124713897705
AudioMixer4              mixer1;         //xy=540.0312461853027,163.03124618530273
AudioEffectDelay         delay1;         //xy=740.031322479248,79.0312614440918
AudioEffectDelay         delay2;         //xy=844.0312461853027,237.0312614440918
AudioEffectDelay         delay3;         //xy=905.031307220459,382.03125381469727
AudioEffectDelay         delay4;         //xy=968.0312423706055,526.0312805175781
AudioOutputI2S           i2s1;           //xy=1061.5312767028809,155.03131580352783
AudioConnection          patchCord1(sine1, 0, mixer1, 0);
AudioConnection          patchCord2(waveform1, 0, mixer1, 1);
AudioConnection          patchCord3(mixer1, delay1);
AudioConnection          patchCord4(mixer1, 0, i2s1, 1);
AudioConnection          patchCord5(delay1, 0, delay2, 0);
AudioConnection          patchCord6(delay2, 0, delay3, 0);
AudioConnection          patchCord7(delay3, 0, delay4, 0);
AudioConnection          patchCord8(delay4, 0, i2s1, 0);
AudioControlSGTL5000     sgtl5000_1;     //xy=540.5312728881836,481.03126335144043
// GUItool: end automatically generated code



#include <Wire.h>
#include "Adafruit_MPR121.h"

#ifndef _BV
#define _BV(bit) (1 << (bit)) 
#endif

// You can have up to 4 on one i2c bus but one is enough for testing!
Adafruit_MPR121 cap = Adafruit_MPR121();

// Keeps track of the last pins touched
// so we know when buttons are 'released'
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void setup() {
  Serial.begin(9600);
  AudioMemory(20);
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.32);
  mixer1.gain(0, 1.0);
  mixer1.gain(1, 0.0);
  mixer1.gain(2, 0.0);
  mixer1.gain(3, 0.0);
  sine1.amplitude(0.75);
  sine1.frequency(220);
  delay1.delay(0, 0);
  delay2.delay(0, 0);  
  delay3.delay(0, 0);  
  delay4.delay(0, 0);  

  while (!Serial) { // needed to keep leonardo/micro from starting too fast!
    delay(10);
  }
  
  Serial.println("Adafruit MPR121 Capacitive Touch sentsorearen testa"); 
  
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
    Serial.println("MPR121 aurkitu gabe, kableatua egiaztatu");
    while (1);
  }
  Serial.println("MPR121 aurkitua!");
}

void loop() {
  
 int a = analogRead(A0);
 int b = analogRead(A1);
 //int aLog = pow (2, (a /(10)+15)/10+3.4);
 int x = map (a, 0, 573, 10, 1000);

 float y = map (b, 0.0, 572.8, 0.0, 500.0);
 float b2 = y/1000;

 sine1.frequency(x);
 sine1.amplitude(b2);

 waveform1.frequency(x);
 waveform1.amplitude(b2);



 
  // Get the currently touched pads
  currtouched = cap.touched();
  
  for (uint8_t i=0; i<12; i++) {
    // it if *is* touched and *wasnt* touched before, alert!
    if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) ) {
      Serial.print(i); Serial.println(" ukitua");
      if(i==1){
        mixer1.gain(0, 0.0);
        mixer1.gain(1, 1.0);
        mixer1.gain(2, 0.0);
        mixer1.gain(3, 0.0);
        waveform1.begin(WAVEFORM_SAWTOOTH);
        waveform1.amplitude(0.75);
        waveform1.frequency(220);
        delay1.delay(0, 0);
        delay2.delay(0, 0);  
        delay3.delay(0, 0);  
        delay4.delay(0, 0);
        Serial.println("marrazo formako uhina");
      }
      if(i==2){
         mixer1.gain(0, 0.0);
        mixer1.gain(1, 1.0);
        mixer1.gain(2, 0.0);
        mixer1.gain(3, 0.0);
        waveform1.begin(WAVEFORM_TRIANGLE_VARIABLE);
        waveform1.amplitude(0.75);
        waveform1.frequency(220);
        delay1.delay(0, 0);
        delay2.delay(0, 0);  
        delay3.delay(0, 0);  
        delay4.delay(0, 0);
      Serial.println("triangelu formako uhina");
      }
      if(i==3){
         mixer1.gain(0, 0.0);
        mixer1.gain(1, 1.0);
        mixer1.gain(2, 0.0);
        mixer1.gain(3, 0.0);
        waveform1.begin(WAVEFORM_SQUARE);
        waveform1.amplitude(0.75);
        waveform1.frequency(220);
        delay1.delay(0, 0);
        delay2.delay(0, 0);  
        delay3.delay(0, 0);  
        delay4.delay(0, 0);
      Serial.println("karratu formako uhina");
      }
      if(i==4){
        mixer1.gain(0, 1.0);
        mixer1.gain(1, 0.0);
        mixer1.gain(2, 0.0);
        mixer1.gain(3, 0.0);
        sine1.amplitude(0.75);
        sine1.frequency(220);
        delay1.delay(0, 0);
        delay2.delay(0, 0);  
        delay3.delay(0, 0);  
        delay4.delay(0, 0);
        Serial.println("karratu formako uhina");
      }
      if(i==5){
        mixer1.gain(0, 1.0);
        mixer1.gain(1, 0.0);
        mixer1.gain(2, 0.0);
        mixer1.gain(3, 0.0);
        sine1.amplitude(0.75);
        sine1.frequency(220);
        delay1.delay(0, 43);
        delay2.delay(0, 0);  
        delay3.delay(0, 0);  
        delay4.delay(0, 0); 
        Serial.println("oihartzuna");
      }
         if(i==0){
        mixer1.gain(0, 1.0);
        mixer1.gain(1, 0.0);
        mixer1.gain(2, 0.0);
        mixer1.gain(3, 0.0);
        delay1.delay(0, 1000);
        delay2.delay(0, 1000);  
        delay3.delay(0, 1000);  
        delay4.delay(0, 1000);  

        Serial.println("oihartzun handia");
        
      }
    }
    
    // if it *was* touched and now *isnt*, alert!
    if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) ) {
      Serial.print(i); Serial.println(" askatua");
    }
  }

  // reset our state
  lasttouched = currtouched;

  // comment out this line for detailed data from the sensor!
  return;
  
  // debugging info, what
  Serial.print("\t\t\t\t\t\t\t\t\t\t\t\t\t 0x"); Serial.println(cap.touched(), HEX);
  Serial.print("Filt: ");
  for (uint8_t i=0; i<12; i++) {
    Serial.print(cap.filteredData(i)); Serial.print("\t");
  }
  Serial.println();
  Serial.print("Base: ");
  for (uint8_t i=0; i<12; i++) {
    Serial.print(cap.baselineData(i)); Serial.print("\t");
  }
  Serial.println();
  
  // put a delay so it isn't overwhelming
  delay(100);
}
